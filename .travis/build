#!/bin/sh
set -ev

# Directories.
root_dir=`pwd`
build_dir="/tmp/_travis/build"
install_dir="/tmp/_travis/install"

# Shortcuts.
git_clone="git clone --quiet --recursive"

# Setup environment variables.
export LD_LIBRARY_PATH="$install_dir/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$install_dir/lib/roboptim-core:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$install_dir/lib/pkgconfig:$PKG_CONFIG_PATH"

# Make cmake verbose.
export CMAKE_VERBOSE_MAKEFILE=1
export CTEST_OUTPUT_ON_FAILURE=1

# build_package
# -------------
#
# Build the package using the last Eigen release (3.2.0) which is not
# available as a Debian package on Ubuntu 12.04.
build_package()
{
    # Checkout Eigen.
    cd "$build_dir"
    wget "http://bitbucket.org/eigen/eigen/get/3.2.0.tar.gz"
    tar xzvf 3.2.0.tar.gz
    cd "$build_dir/eigen-eigen-ffa86ffb5570/"
    mkdir -p "$build_dir/eigen-eigen-ffa86ffb5570/_build"
    cd "$build_dir/eigen-eigen-ffa86ffb5570/_build"
    cmake .. -DCMAKE_INSTALL_PREFIX:STRING="$install_dir" \
        -Dpkg_config_libdir:STRING="$install_dir/lib"
    make
    make install

    echo "Building package..."
    cd "$build_dir"
    cmake "$root_dir" -DCMAKE_INSTALL_PREFIX="$install_dir"	\
	-DCMAKE_CXX_FLAGS="--coverage"				\
	-DCMAKE_EXE_LINKER_FLAGS="--coverage"			\
	-DCMAKE_MODULE_LINKER_FLAGS="--coverage"
    make
    make install
    make test
}

# debian_build_package
# --------------------
#
# Use git-buildpackage and pbuilder to build the package in a sid
# sandbox.
debian_build_package()
{
    export GNUPGHOME="$root_dir/.travis/.gnupg"
    echo "Building Debian package..."
    cd "$root_dir"
    git-dch -a -S --snapshot-number=1 --ignore-branch --git-author
    sudo chmod -R 777 /var/cache/pbuilder/ccache
    sudo git-buildpackage		\
	--git-submodules		\
	--git-ignore-branch		\
	--git-export-dir="$build_dir/export" \
	--git-tag \
	--git-upstream-branch=master	\
	--git-dist=unstable		\
	--git-pbuilder			\
	--git-force-create		\
	--git-verbose			\
	--git-ignore-new		\
	--git-retag			\
	-p\"gpg\\ --passphrase\\ \'${GNUPG_PASSPHRASE}\'\"

     sudo git-buildpackage		\
	--git-submodules		\
	--git-ignore-branch		\
	--git-export-dir="$build_dir/export" \
	--git-tag \
	--git-upstream-branch=master	\
	--git-dist=unstable		\
	--git-pbuilder			\
	--git-force-create		\
	--git-verbose			\
	--git-ignore-new		\
	--git-retag			\
	-p\"gpg\\ --passphrase\\ \'${GNUPG_PASSPHRASE}\'\" \
	 -S -sa
}


# Realize a normal build in all branches except the one containing a
# debian/ folder.
if [ -d debian ]; then
    debian_build_package
else
    build_package
fi
